#!/usr/bin/env bash

# Author: Arran D. Stewart
#
# Maze generator script, using Prim's maze-generation
# algorithm.
#
# Version: 0.1.0

set -o functrace
set -o pipefail
set -u
set -e

PS4="  $PS4"

usage() {
  # shellcheck disable=SC2059
  p () { printf "${PURPLE}"; }
  # shellcheck disable=SC2059
  nf () { printf "${NOFORMAT}"; }
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-b] maze_width maze_height

Outputs an (optionally badly-formed) random maze
on stdout.

The maze will have $(p)(maze_width * maze_height)$(nf) cells,
with walls or corridors between them. The printed output
will have $(p)(maze_width * 2 + 1)$(nf) columns and
$(p)(maze_height * 2 + 1)$(nf) rows.

Available options:
-b          Generate a (probably) bad maze
--help      Print this help and exit
EOF
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    # shellcheck disable=SC2034
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m'
    BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m';
  else
    # shellcheck disable=SC2034
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}


failure() {
  local lineno=$1
  local msg=$2
  local func=$3
  echo >&2 "Failed $(caller) in $func:$lineno: $msg"
  exit 1
}

# enable "catch"-ing of errors
set_trap () {
  trap 'set +eu; failure ${LINENO} "$BASH_COMMAND" "${FUNCNAME}"' ERR
}

# eval'ing this will result in an exit
# being "thrown"
throw='set_trap; set -euo pipefail; (exit 2)'

# clear global vars
# (in case we're being `source`ed)
unset GRAPH
unset GRAPH_ATTRS
unset VISITED_NODES
unset MAZE_DEBUG

# global graph. An associative array.
# key = pt in string form (comma separated x, y)
# val = walls (E, S). stored as a string e.g. "1,1" means has both walls,
#   0,1 means only has south wall.
declare -A GRAPH
# stores [width], [height]
declare -A GRAPH_ATTRS

# map from (x,y) to some number -- 1 if visited.
# Just undefined if not visited.
# once visited, set VISITED_NODES[x,y] to 1.
declare -A VISITED_NODES

# set to true to display debug messages
MAZE_DEBUG=0

# produce pseudorandom output on stdout, seeded
# by the seed $1.
get_seeded_random () {
  seed="$1"
  openssl enc -aes-256-ctr -pass pass:"$seed" -nosalt \
    </dev/zero 2>/dev/null
}

# args: lo, hi
# random num from lo to hi inclusive.
shuf_random () {
  local res lo hi;
  lo=$1
  hi=$2
  local seed="$RANDOM"
  if res="$(shuf --random-source=<(get_seeded_random $seed) -i "$lo"-"$hi" -n 1)"; then
    true;
  else
    eval "$throw";
  fi
  echo "$res";
}


# args: char, n.
# repeat char, n times.
n_times () {
  local char="$1";
  local n=$2;
  printf '#%.0s' $(seq 1 "$n") | sed "s/#/$char/g";
}

# Deconstruct/pattern-match on an array of form (x y),
# into two variables.
#
# args:
# - /name/ of a 2-el array (e.g. array of form (x y));
# - /name/ of a var to put fst in
# - /name/ of a var to put snd in
#
# All works fine as long as your args don't
# start with 'ref_to...' and use the same names
# as inner vars (which they shouldn't); since
# then bash gets confused and interprets these
# as circular refs.
deconstruct_pair () {
  local -n ref_to_pair="$1"
  local -n ref_to_fst="$2"
  local -n ref_to_snd="$3"
  # shellcheck disable=SC2034
  ref_to_fst="${ref_to_pair[0]}"
  # shellcheck disable=SC2034
  ref_to_snd="${ref_to_pair[1]}"
}

# split a string on some delimiter,
# and call deconstruct pair on the result.
#
# args:
# - string to split
# - delim
# - /name/ of fst
# - /name/ of snd
split_pair () {
  local str="$1";
  local delim="$2";
  # shellcheck disable=SC2034
  local -n fst="$3";
  # shellcheck disable=SC2034
  local -n snd="$4";
  # shellcheck disable=SC2034
  local arr=(${str//$delim/ })
  deconstruct_pair arr fst snd;
}

test_deconstruct_pt () {
  local my_pt=(3 5);
  local x=-1 y=-1;
  declare -p my_pt x y
  deconstruct_pair my_pt x y;
  declare -p my_pt x y
}

test_split_pair () {
  local my_str="3,5"
  local x=-1 y=-1;
  split_pair "$my_str" ',' x y
  declare -p my_str x y
}

# args: width, height
# initializes graph. Start with walls everywhere
# also sets VISITED_NODES[0,0]=1
# (i.e. we visit the top-left corner)
mk_graph () {
  local width=$1;
  local height=$2;
  GRAPH_ATTRS["width"]="$width";
  GRAPH_ATTRS["height"]="$height";
  local x y;
  for ((y=0; y < height; y=y+1)); do
    for ((x=0; x < width; x=x+1)); do
      GRAPH["$x,$y"]="1,1";
    done
  done
  VISITED_NODES[0,0]=1
}

# make a sample graph, see what's in it
test_mk_graph () {
  mk_graph 2 1
  declare -p GRAPH
}

# print an empty cell (' ') and possibly
# its east wall.
#
# args: east_wall. "1" if a wall.
pretty_cell () {
  local e_wall="$1";
  printf ' '
  if ((e_wall == 1)); then
    printf '#';
  else
    printf ' ';
  fi
}

# print south wall (possibly) and SE corner of cell.
#
# args: south wall. "1" if a wall.
pretty_floor () {
  local s_wall="$1";
  if ((s_wall == 1)); then
    printf '#';
  else
    printf ' ';
  fi
  printf '#';
}

# pretty-print the graph contained in
# GRAPH.
pretty_graph () {
  local width height;
  local grid_width;
  width=GRAPH_ATTRS["width"]
  height=GRAPH_ATTRS["height"]
  grid_width=$((width * 2 + 1))
  n_times '#' "$grid_width";
  echo;
  local x y;
  for ((y=0; y < height; y=y+1)); do
    # print east-west walls
    for ((x=0; x < width; x=x+1)); do
      local el e_wall s_wall;
      el="${GRAPH[$x,$y]}";
      split_pair "$el" ',' e_wall s_wall;
      if ((x==0 && y !=0)); then
        printf '#'
      fi
      if ((x==0 && y ==0)); then
        printf ' '
      fi

      # no east wall for bottom-right cell
      if ((x == width-1 && y == height - 1)) ; then
        e_wall=0
      fi
      pretty_cell "$e_wall";
    done
    echo
    # print north-south walls
    for ((x=0; x < width; x=x+1)); do
      el="${GRAPH[$x,$y]}";
      split_pair "$el" ',' e_wall s_wall;
      if ((x==0)); then
        printf '#'
      fi
      pretty_floor "$s_wall";
    done
    echo
  done
}

# args: x, y.
# Have we visited point (x,y)?
has_been_visited () {
  # Disable undefinedness-checking.
  # To properly revert, should use:
  #   OLDOPTS="$(set +o)"
  # then eval $OLDOPTS at end.
  set +u

  local x=$1
  local y=$2
  [ "${VISITED_NODES[$x,$y]}" = "1" ] ;
  res=$?

  set -u
  #eval "$OLDOPTS"
  return "$res"
}

test_visited () {
  #set +e
  VISITED_NODES[1,1]=1
  has_been_visited 1 1
  echo $?
}

test_visited_expect_fail () {
  #set +e
  VISITED_NODES[1,1]=1
  has_been_visited 1 0
  [ "$?" = "1" ];
  echo $?
}

# For debugging.
#
# display variables in `less`; but not things that are probably env vars,
# and not _xspecs (which might be set by completion functions,
# but probably doesn't contain anything intended for human consumption)
display_variables_only () {
  # posix behaviour of `set` is to only show vars, not funcs
 (set -o posix; set) | grep -v '^[A-Z]' | grep -v 'xspecs' | less
}

# Given the state of the graph and visited nodes:
# punch a new hole from visited to unvisited
# across the border, at a random spot.
punch_one_hole () {
  false;

  if ((MAZE_DEBUG)); then
    printf '  '; declare -p VISITED_NODES;
  fi

  # keep a list of visited cells with unvisited S or E neighbour in
  #  `candidates`
  local -A candidates
  local e_neighbour_visited
  local s_neighbour_visited

  local width="${GRAPH_ATTRS[width]}"
  local height="${GRAPH_ATTRS[height]}"
  local x y;
  for ((y=0; y < height; y=y+1)); do
    for ((x=0; x < width; x=x+1)); do
      # disable -e; to properly revert
      # after, search for OLDOPTS.
      if has_been_visited $x $y ; then
        # check neighbour to east
        if has_been_visited $((x+1)) $y; then
          e_neighbour_visited=1;
        else
          e_neighbour_visited=0;
        fi
        # check neighbour to south
        if has_been_visited $x $((y+1)); then
          s_neighbour_visited=1;
        else
          s_neighbour_visited=0;
        fi
        # if valid, add as a candidate
        if (( ! e_neighbour_visited || ! s_neighbour_visited )); then
          candidates[$x,$y]=1
        fi
      fi
    done
  done

  if ((MAZE_DEBUG)); then
    printf '  '; declare -p VISITED_NODES;
    printf '  '; declare -p candidates;
    printf '  '; echo tot cand: ${#candidates[@]}
  fi

  local tot_candidates=${#candidates[@]}
  local hi=$((tot_candidates-1))

  # No candidates left, so exit.
  # TODO: should check the logic here is
  # correct.
  if ((hi < 0)) ; then
    return 1;
  fi

  local rand_idx=$(( RANDOM % (hi+1) ))
  local cand_array=("${!candidates[@]}")

  local chosen_candidate="${cand_array[$rand_idx]}"
  split_pair "$chosen_candidate" ',' x y;

  if ((MAZE_DEBUG)); then
    printf '  '; declare -p chosen_candidate x y
  fi


  if has_been_visited $((x+1)) $y ; then
    e_neighbour_visited=1;
  fi
  if has_been_visited $x $((y+1)); then
    s_neighbour_visited=1;
  fi

  # dir to go if there's a choice. 0=east, 1=south.
  local rand_e_s;
  rand_e_s="$(( RANDOM % 2 ))"

  local e_wall=xx s_wall=xx
  local direction_to_go="xx"
  split_pair "${GRAPH[$x,$y]}" ',' e_wall s_wall;

  if (( x < (width-1) && y < (height-1) && (! e_neighbour_visited) && (! s_neighbour_visited) )); then
    # two choices
    if ((rand_e_s == 0 )) ; then
      if ((MAZE_DEBUG)); then
        printf '  '; echo choose bust east
      fi
      direction_to_go="e"
    else
      if ((MAZE_DEBUG)); then
        printf '  '; echo choose bust south
      fi
      direction_to_go="s"
    fi;
  elif (( x < (width-1) &&  (! e_neighbour_visited) )); then
    if ((MAZE_DEBUG)); then
      printf '  '; echo one choice, bust east;
    fi
    direction_to_go="e"
  elif (( y < (height-1) &&  (! s_neighbour_visited) )); then
    if ((MAZE_DEBUG)); then
      printf '  '; echo one choice, bust south;
    fi
    direction_to_go="s"
  else
    # bad choice, skip this round
    if ((MAZE_DEBUG)) ; then
      printf >&2 'oops :/\n';
    fi
    return 1
  fi

  local newly_visited_node;

  if [ "$direction_to_go" = "e" ] ; then
    e_wall=0
    newly_visited_node="$((x+1)),$y"
  elif [ "$direction_to_go" = "s" ] ; then
    s_wall=0
    newly_visited_node="$x,$((y+1))"
  else
    printf >&2 'oops :/\n';
    eval "$throw";
  fi

  GRAPH["$x,$y"]="$e_wall,$s_wall";
  VISITED_NODES["$newly_visited_node"]=1
}

# construct a maze using Prim's maze-generation
# algorithm.
#
# args: width height
#
# Constructed maze is put in GRAPH and can be
# printed by calling `pretty_graph`.
construct_maze () {
  local width="$1"
  local height="$2"
  local total_node_count=$((width * height))
  mk_graph "$width" "$height"
  # start at top-left corner
  VISITED_NODES[0,0]=1
  local ctr=0
  local num_visited="${#VISITED_NODES[@]}"

  while (( num_visited < total_node_count )); do
    # progress display
    if ((width > 4 && height > 4 && ctr % 5 == 0)); then
      # shellcheck disable=SC2059
      printf >&2 "${GREEN}.${NOFORMAT}";
    fi
    # TODO: handle return val properly
    punch_one_hole || :

    ctr=$((ctr + 1));
    if ((ctr > total_node_count * 10)); then
      printf >&2 '%s: %s for a %s-size maze\n' \
        "ack! seems like far too many iterations" \
        "$ctr" "$total_node_count"
      eval "$throw";
    fi

    num_visited="${#VISITED_NODES[@]}"
  done
  # finish progress-print
  printf >&2 '\n'
}

# construct an (almost certainly) bad maze
construct_badmaze () {
  # shellcheck disable=SC2059
  printf >&2 "${GREEN}...constructing likely bad maze...${NOFORMAT}\n"
  local width="$1"
  local height="$2"
  construct_maze "$1" "$2"
  local badness_type
  if badness_type="$(shuf -i 0-3 -n 1)"; then
    true;
  else
    eval "$throw";
  fi
  case $badness_type in
    0)
        # shellcheck disable=SC2059
        printf >&2 "${GREEN}blocked start${NOFORMAT}\n";
        pretty_graph | sed 's/^ /#/' ;;
    1)
        # shellcheck disable=SC2059
        printf >&2 "${GREEN}blocked end${NOFORMAT}\n";
        pretty_graph | sed 's/ $/#/' ;;
    2)
        # shellcheck disable=SC2059
        printf >&2 "${GREEN}bad characters${NOFORMAT}\n";
        pretty_graph | sed 's/#/X/g' ;;

    # shuffled lines.
    # It's /possible/ you could still end up
    # with an okay maze.
    3)
        # shellcheck disable=SC2059
        printf >&2 "${GREEN}shuffled lines${NOFORMAT}\n";
        pretty_graph | shuf ;;
  esac

}

test_punch_hole () {
  printf '\ninit\n\n'
  mk_graph 2 2
  pretty_graph
  printf "\nnext\n\n"
  printf '\npunching\n\n'
  punch_one_hole;
  printf '\ngraph now:\n\n'
  pretty_graph
}

main () {
  # validate args
  if [ "$#" -eq 1 ] && [ "$1" = "--help" ] ; then
    usage;
    exit;
  elif [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
    printf >&2 "${RED}Error:${NOFORMAT} Expected 2-3 args; got %s. See \"usage\" below.\n" "$#"
    usage;
    exit 1;
  fi

  if [ "$#" -eq 3 ] ; then
    badness="$1"; shift
    if [ "$badness" != "-b" ] ; then
      # shellcheck disable=SC2059
      printf >&2 "${RED}Error:${NOFORMAT} bad flag, expected -b"
      usage;
      exit 1;
    fi
    badness=1
  else
    badness=0;
  fi

  local width_arg=$1
  local height_arg=$2

  if ((width_arg < 2 || height_arg < 2 )); then
    printf >&2 "${RED}Error:${NOFORMAT} %s\n" \
      'maze height and width must be at least 2'
    exit 1
  fi

  if ((width_arg > 20 || height_arg > 20 )); then
    printf >&2 "${RED}Error:${NOFORMAT} %s\n" \
      'Mazes longer than 20 cells in any dimension are likely to be too slow to generate'
    exit 1
  fi

  if ((badness == 0)); then
    construct_maze "$width_arg" "$height_arg";
    pretty_graph;
  else
    # also prints it
    construct_badmaze "$width_arg" "$height_arg" ;
  fi
}

# check coreutils installed
RANDOM=$(shuf_random 0 16384)
# Uncomment to set RANDOM to a known seed, to get reproducible
# results (for good mazes -- not yet done for bad):
#RANDOM=99


# setup colors and run main
setup_colors
set_trap
main "${@}"

